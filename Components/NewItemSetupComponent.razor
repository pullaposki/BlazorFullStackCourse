<!--Bind inputs to the created instance of Product-->
<p>Item ID</p>
<p><input @bind="@ProductInstance.Id"/></p>
<p>Asking Price</p>
<p><input @bind-value="@ProductInstance.AskingPrice" @bind-value:event = "oninput" /></p>
<p>Units</p>
<p><input @bind-value="@ProductInstance.Units" @bind-value:event="oninput" /></p>

<!--In Blazor, the UI is updated whenever the state of a component changes. 
In this case, ProductInstance.Total is part of the state of your component. 
When ProductInstance.Total changes, Blazor re-renders the component to reflect the new state.-->
<p>Total in euros</p>
<p>@ConvertToDollars(ProductInstance.Total)</p>

<!--<p><input @bind-value="@ProductInstance.Units" @bind-value:event="oninput" /></p>: This is an input element inside a paragraph element. 
The @bind-value directive creates a two-way data binding on the value property of the input element. 
It means that the value of the input element is bound to the Units property of the ProductInstance object. 
When the user types into the input field, the Units property of the ProductInstance object is updated. Similarly, 
if the Units property of the ProductInstance object is updated programmatically, the value of the input field will also be updated. 
The @bind-value:event="oninput" part specifies that the binding should update the Units property of the ProductInstance object as soon as the user types into the input field 
(as opposed to waiting until the field loses focus).-->

<!--Trigger custom event on click that takes the Product instance as a parameter for it's callback-->

<!--When HandleSubmit is changed to an async Task method, it can be directly used as an event handler without the need for a lambda function.
This is because Blazor supports Task-returning event handlers. 
So, you can assign HandleSubmit directly to onclick, and Blazor will await the Task.-->
<p><button @onclick = "HandleSubmit">Submit</button></p>

@code 
{
	// Create a new instance of Product
	DataModels.Product ProductInstance = new DataModels.Product();

	// Public event
	[Parameter]
	public EventCallback<DataModels.Product> OnProductSubmit { get; set; }

	void CreateNewProduct() => ProductInstance = new DataModels.Product();

	async Task HandleSubmit()
	{
		await OnProductSubmit.InvokeAsync(ProductInstance);
		ProductInstance = new DataModels.Product();
	}

	double ConvertToDollars(int cents)
	{
		return Convert.ToDouble(cents) / 100;
	}
}
